#!/usr/bin/env tclsh
#
# Wildcard-script to monitor counter variables from the 
# xotcl-request-monitor, which can be fed with one-liners
# to monitor arbitrary data.
#
# To monitor, link this plugin such as:
#
#    ln -s /usr/share/munin/plugins/naviserver_dbstats2 /etc/munin/plugins/naviserver_development_dbstats2_time
#    ln -s /usr/share/munin/plugins/naviserver_dbstats2 /etc/munin/plugins/naviserver_development_dbstats2_count
#    ln -s /usr/share/munin/plugins/naviserver_dbstats2 /etc/munin/plugins/naviserver_development_dbstats2_connected
#
# where "development" is the name of the server and
# "time" and "count" are two graphics handled by the same plugin.
# 
# To configure this plugin put something like the 
# following into /etc/munin/plugin-conf.d/naviserver
#
# [naviserver_*]
#    env.url /SYSTEM/munin?t=
#
# [naviserver_development_*]
#    env.address localhost
#    env.port 8000
#    env.ssl  false
#
# [naviserver_production_dbstats_time]
#    env.title "Datenbankstatistik"
#

lassign [split $argv0 _] . serverName service kind
array set config [subst {
  address localhost
  port 8000
  ssl  false
  url /SYSTEM/munin?t=
  vars ""
  pools "pool1 pool2 pool3"
  graph_period second
  title "DB Statistics $kind"
}]

switch $kind {
    count     {set config(vars) "statements handles"; set rrdDST DERIVE}
    time      {set config(vars) "waittime sqltime"; set rrdDST DERIVE}
    connected {set config(vars) "connected"; set rrdDST GAUGE}
}

foreach n [array names config] {
  if {[info exists ::env($n)]} {
    set config($n) $::env($n)
  }
}


append service &vars=[string map {" " +} $config(vars)]

if {$argv eq "config" } {
    puts "graph_title $serverName $config(title)"
    puts "graph_args --base 1000 -l 0"
    puts "graph_category naviserver"
    puts "graph_period $config(graph_period)"
    if {$kind eq "count"} {
	puts {graph_vlabel operations per ${graph_period}}
    } elseif {$kind eq "connected"} {
	puts {graph_vlabel number of connections}
    } else {
	puts {graph_vlabel ms per ${graph_period}}
    }
    puts "graph_info This graph shows the $kind DB Statistics of NaviServer instance $serverName"
    foreach pool $config(pools) {
	foreach s $config(vars) {
	    set item [string map {: _ . _} ${pool}_$s]
	    puts "$item.label ${pool}:$s"
	    puts "$item.info $kind of $s"
	    puts "$item.type $rrdDST"
	    puts "$item.min 0"
	}
    }
    return
}

if {$config(ssl)} {
  # The following catch is due to a seemingly incorrect setup for tcl in fedora core.
  if {[catch {package req tls}]} {lappend auto_path /usr/lib/tcl8.5; package req tls}
  set f [tls::socket $config(address) $config(port)]
} else {
  set f [socket $config(address) $config(port)]
}
puts $f "GET $config(url)$service HTTP/1.0\n"
flush $f
set content [read $f]
close $f
foreach line [split $content \n] {
   set line [string trim $line]
   if {$line eq ""} {set output 1; continue}
   if {[info exists output]} {puts $line}
}

