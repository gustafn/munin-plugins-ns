#!/usr/bin/env tclsh
#
# Wildcard-script to monitor the memory usage of a running NaviServer instance.
# To monitor a NaviServer instance named "development", link this plugin such as:
#
#    ln /usr/share/munin/node/plugins-contrib/naviserver_memsize /etc/munin/node.d/naviserver_development_memsize
#
# To configure this plugin put something like the
# following into /etc/munin/plugin-conf.d/naviserver
#
# [naviserver_*]
#    env.url /SYSTEM/munin?t=
#
# [naviserver_development_*]
#    env.address localhost
#    env.port    8000
#    env.ssl     false
#    env.client  tcl
#

lassign [split $argv0 _] . serverName service
array set config {
  address localhost
  port    8000
  ssl     false
  client  tcl
  url     /SYSTEM/munin?t=
}

foreach n [array names config] {
  if {[info exists ::env($n)]} {
    #puts "override $n with $::env($n)"
    set config($n) $::env($n)
  }
}

if {$argv eq "config" } {
  puts "graph_title $serverName nsd size "
  puts "graph_category naviserver"
  puts "graph_info This graph shows the current memory usage for Naviserver instance $serverName"
  puts "graph_args --lower-limit 0 --base 1024"
  puts "vsize.label vsize"
  puts "vsize.info Virtual memory size"
  puts "vsize.type GAUGE"
  puts "vsize.min 0"
  puts "rss.label rss"
  puts "rss.info Resident memory size"
  puts "rss.type GAUGE"
  puts "rss.min 0"
  puts "uss.label uss"
  puts "uss.info Unshared memory size"
  puts "uss.type GAUGE"
  puts "uss.min 0"
  puts "pss.label pss"
  puts "pss.info proportional set size"
  puts "pss.type GAUGE"
  puts "pss.min 0"
  puts "swap.label swap"
  puts "swap.info swapped out memory size"
  puts "swap.type GAUGE"
  puts "swap.min 0"
  return
}

if {$config(client) eq "curl"} {
  set url [expr {$config(ssl) ? "https" : "http"}]://$config(address):$config(port)/$config(url)$service
  set content \n[exec curl -k $url 2> /dev/null]\n
} else {
  if {$config(ssl)} {
    package req tls
    set f [tls::socket $config(address) $config(port)]
  } else {
    set f [socket $config(address) $config(port)]
  }
   puts $f "GET $config(url)$service HTTP/1.0\n"
   flush $f
   set content [read $f]
   close $f
}

foreach line [split $content \n] {
   set line [string trim $line]
   if {$line eq ""} {set output 1; continue}
   if {[info exists output]} {puts $line}
}
