#!/usr/bin/env tclsh
#
# Wildcard-script to monitor counter variables from the 
# xotcl-request-monitor, which can be fed with one-liners
# to monitor arbitrary data.
#
# To monitor, link this plugin such as:
#
#    ln -s /usr/share/munin/plugins/naviserver_dbstats /etc/munin/plugins/naviserver_development_dbstats_pool1
#    ln -s /usr/share/munin/plugins/naviserver_dbstats /etc/munin/plugins/naviserver_development_dbstats_pool2
#
# where "development" is the name of the server and
# "pool1" and "pool2" are two db pools in the server
# Every sample configuration selects certain 
# variables, which are listed in the configuration
# section (see below) for this server and graph.
# 
# To configure this plugin put something like the 
# following into /etc/munin/plugin-conf.d/naviserver
#
# [naviserver_*]
#    env.url /SYSTEM/munin?t=
#
# [naviserver_development_*]
#    env.address localhost
#    env.port 8000
#    env.ssl  false
#
# [naviserver_production_dbstats_pool1]
#    env.title "Datenbankstatistik von Pool1"
#    env.vars "statements gethandles waittime sqltime"
#
# [naviserver_production_dbstats_pool2]
#    env.vars "waittime sqltime"

lassign [split $argv0 _] . serverName service pool
array set config [subst {
  address localhost
  port 8000
  ssl  false
  url /SYSTEM/munin?t=
  vars "statements gethandles waittime sqltime"
  graph_period minute
  title "DB Statistics of pool $pool"
}]

foreach n [array names config] {
  if {[info exists ::env($n)]} {
    set config($n) $::env($n)
  }
}

append service &vars=[string map {" " +} $config(vars)]&pool=$pool

if {$argv eq "config" } {
  puts "graph_title $serverName $config(title)"
  puts "graph_args --base 1000 --logarithmic"
  puts "graph_category naviserver"
  puts "graph_period $config(graph_period)"
  puts {graph_vlabel operations or ms spent per ${graph_period}}
  puts "graph_info This graph shows the DB Statistics for $pool of NaviServer instance $serverName"
  foreach s $config(vars) {
     set item [string map {: _ . _} $s]
     puts "$item.label $s"
     puts "$item.info Frequency of $s"
     puts "$item.type DERIVE"
     puts "$item.min 0"
  }
  return
}

if {$config(ssl)} {
  # The following catch is due to a seemingly incorrect setup for tcl in fedora core.
  if {[catch {package req tls}]} {lappend auto_path /usr/lib/tcl8.5; package req tls}
  set f [tls::socket $config(address) $config(port)]
} else {
  set f [socket $config(address) $config(port)]
}
puts $f "GET $config(url)$service HTTP/1.0\n"
flush $f
set content [read $f]
close $f
foreach line [split $content \n] {
   set line [string trim $line]
   if {$line eq ""} {set output 1; continue}
   if {[info exists output]} {puts $line}
}

